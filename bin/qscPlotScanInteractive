#!/usr/bin/env python

import os
import sys
import numpy as np
from scipy.io import netcdf
import matplotlib.pyplot as plt

print()
print("Usage: ", os.path.basename(__file__), ' qsc_out.<extension>.nc')

if len(sys.argv) != 2:
   raise RuntimeError("A qsc_out.*.nc file must be provided as an argument")

filename = sys.argv[1]
bare_filename = os.path.basename(filename)
s = 'qsc_out.'
if bare_filename[:len(s)] != s or filename[-3:] != '.nc':
   raise RuntimeError("A qsc_out.*.nc file must be provided as an argument")
   
f = netcdf.netcdf_file(filename, 'r', mmap=False)
iota = f.variables['scan_iota'][()]
B20_variation = f.variables['scan_B20_variation'][()]
r_singularity = f.variables['scan_r_singularity'][()]
d2_volume_d_psi2 = f.variables['scan_d2_volume_d_psi2'][()]
L_grad_B = f.variables['scan_min_L_grad_B'][()]
L_grad_grad_B = f.variables['scan_min_L_grad_grad_B'][()]
elongation = f.variables['scan_max_elongation'][()]

well = (d2_volume_d_psi2 < 0)
hill = (d2_volume_d_psi2 >= 0)

fig = plt.figure(figsize=(14,7))

nrows = 1
ncols = 1

ax = plt.subplot(nrows, ncols, 1)
#scatterplot_handle = plt.scatter(B20_variation, r_singularity, c=well, s=4, cmap='bwr')
scatterplot_handle = plt.scatter(d2_volume_d_psi2, r_singularity, c=B20_variation, s=4)
#plt.xlabel('B20 variation')
plt.xlabel("V''")
plt.ylabel('r singularity')
plt.colorbar()
plt.title('color = B20 variation')
#plt.legend(loc=0, fontsize=6)

plt.figtext(0.5, 0.99, 'Data: ' + os.path.abspath(filename), ha='center', va='top', fontsize=6)
plt.figtext(0.5, 0.01, 'Plot generated by ' + os.path.abspath(__file__), ha='center', va='bottom', fontsize=6)

plt.tight_layout()
# For code below, see
# https://stackoverflow.com/questions/7908636/possible-to-make-labels-appear-when-hovering-over-a-point-in-matplotlib
annot = ax.annotate("", xy=(0,0), xytext=(20,20),textcoords="offset points",
                    bbox=dict(boxstyle="round", fc="w"),
                    arrowprops=dict(arrowstyle="->"),fontsize=6)
annot.set_visible(False)

def update_annot(ind):
    index = ind["ind"][0]
    pos = scatterplot_handle.get_offsets()[index]
    annot.xy = pos
    """
    text = "iota={:.2g}, elong={:.2g}\nindex={}, eta_bar={:.4g}\nsigma_initial={:.4g}\nR0c={}\nZ0s={}\nR0s={}\nZ0c={}".format( \
        iotas[index], max_elongations[index], str(index),scan_eta_bar[index],scan_sigma_initial[index], \
            ", ".join('{:.4g}'.format(k) for k in scan_R0c[:,index]), \
            ", ".join('{:.4g}'.format(k) for k in scan_Z0s[:,index]), \
            ", ".join('{:.4g}'.format(k) for k in scan_R0s[:,index]), \
            ", ".join('{:.4g}'.format(k) for k in scan_Z0c[:,index]))
    """
    text = 'index={} $\\iota$={:.2g}\n' \
    'elong={:.2g} V"={:.4g}\n' \
    '$L\\nabla B$={:.2g} $L\\nabla \\nabla B$={:.2g}\n' \
    '$r_c$={:.2g} $\Delta B_2$={:.2g}'.format(
       index,
       iota[index],
       elongation[index],
       d2_volume_d_psi2[index],
       L_grad_B[index],
       L_grad_grad_B[index],
       r_singularity[index],
       B20_variation[index]
    )
    
    #list(map(str,scan_R0c[:,index]))))
    #text = "{}".format(" ".join(list(map(str,ind["ind"]))))
    #text = "{}, {}".format(" ".join(list(map(str,ind["ind"]))), 
    #                       " ".join([names[n] for n in ind["ind"]]))
    annot.set_text(text)
    #annot.get_bbox_patch().set_facecolor(cmap(norm(c[ind["ind"][0]])))
    annot.get_bbox_patch().set_facecolor('w')
    #annot.get_bbox_patch().set_alpha(0.4)


def hover(event):
    vis = annot.get_visible()
    if event.inaxes == ax:
        cont, ind = scatterplot_handle.contains(event)
        if cont:
            update_annot(ind)
            annot.set_visible(True)
            fig.canvas.draw_idle()
        else:
            if vis:
                annot.set_visible(False)
                fig.canvas.draw_idle()

fig.canvas.mpl_connect("motion_notify_event", hover)

plt.show()
